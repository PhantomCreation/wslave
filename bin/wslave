#!/usr/bin/env ruby
require 'thor'
require 'fileutils'

##
# The wslave command line interface.
class WSlaveCLI < Thor
  def self.exit_on_failure?
    true
  end

  desc 'version', 'Prints the version of the installed WSlave'
  def version
    require 'rubygems'
    spec = Gem::Specification.load("#{__dir__}/../wslave.gemspec")
    puts spec.version
  end

  desc 'new [APP_PATH]', 'Generate a new app at APP_PATH'
  long_desc 'Creates a new application in the current directory or in the specificed path.'
  option :version, default: '',
                   desc: 'Specify the version, EG: "--version 6.5". To specify edge/development master use "--version edge".'
  option :wspath, default: '',
                  desc: 'specify the path to the wslave distribution, EG: "--wspath ../wslave".
      NOTE: This is relative to the new app path.'
  option :wppath, default: '',
                  desc: 'specify the path to a cloned git wordpress distribution, EG: "--wppath /shared/wordpress".
      NOTE: This is relative to the new app path.
      NOTE: If no data is found in this directory, wslave will clone the official WordPress repository here and
      copy it. Also, if there is data here that does not match the format of the official WordPress repository,
      most wslave functionality will probably be broken.'
  def new(path = './')
    require_relative '../lib/wslave/new'
    real_path = File.expand_path(path)
    WSlaveNew.new(real_path, options['version'], options['wspath'], options['wppath'])
  end

  desc 'update', 'Updates toolchain'
  long_desc 'Updates toolchain. Will not overwrite existing configuration files.'
  def update
    require_relative '../lib/wslave/update'
    WSlaveUpdate.new
  end

  desc 'sync', 'Synchronizes submodules and file permissions'
  def sync
    require_relative '../lib/wslave/tools'
    puts 'Synchronizing...'
    WSlaveTools.sync
  end

  ##
  # Development commands.
  class Dev < Thor
    desc 'start [options]', 'Starts the development server'
    method_option :f, type: :boolean, default: false, description: 'force close other servers first'
    def start
      puts 'Starting server...'
      require_relative '../lib/wslave/docker'
      WSlaveDocker.new.server(:start, options['f'])
    end

    desc 'stop [options]', 'Stops the development server'
    method_option :f, type: :boolean, default: false, description: 'force close other servers first'
    def stop
      puts 'Stopping server...'
      require_relative '../lib/wslave/docker'
      WSlaveDocker.new.server(:stop, options['f'])
    end

    desc 'reset [options]', 'Deletes all container data and volumes, then rebuilds and restarts the containers'
    method_option :f, type: :boolean, default: false, description: 'force close other servers first'
    def reset
      puts 'Stopping server...'
      require_relative '../lib/wslave/docker'
      WSlaveDocker.new.server(:reset, options['f'])
    end

    desc 'remove [options]', 'Shuts down containers and deletes all container data and volumes'
    method_option :f, type: :boolean, default: false, description: 'force close other servers first'
    def remove
      puts 'Stopping server...'
      require_relative '../lib/wslave/docker'
      WSlaveDocker.new.server(:remove, options['f'])
    end

    desc 'log', 'Starts tracing the log'
    def log
      require_relative '../lib/wslave/docker'
      WSlaveDocker.new.log
    end

    desc 'console', 'Opens a shell/console connection in the nweb container (container must be running)'
    def console
      require_relative '../lib/wslave/docker'
      WSlaveDocker.new.console
    end

    desc 'snapshot', 'Takes a backup snapshot of the development database and makes it active.'
    def snapshot
      require_relative '../lib/wslave/database'
      WSlaveDatabase.new.dev_snapshot
    end
  end
  desc 'dev COMMAND [options]', 'Local development server control and utilities.'
  subcommand 'dev', Dev

  class Staging < Thor
    # TODO
    desc 'ssh', 'Open an SSH session to the staging host site root.'
    def ssh
      require_relative '../lib/wslave/remote'
      WSlaveRemote.ssh(:staging)
    end
  end
  desc 'staging COMMAND [options]', 'Staging environment deploy and control.'
  subcommand 'staging', Staging

  class Production < Thor
    # TODO
    desc 'ssh', 'Open an SSH session to the staging host site root.'
    def ssh
      require_relative '../lib/wslave/remote'
      WSlaveRemote.ssh(:staging)
    end
  end
  desc 'production COMMAND [options]', 'Production environment deploy and control.'
  subcommand 'production', Production
end

WSlaveCLI.start(ARGV)
